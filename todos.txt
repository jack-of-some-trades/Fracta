Frontend (TSX / UI) :
	- Primitves: Add a Menu system for editing options
	- Object-Tree: Add Buttons to create Primitive Groups
	- Indicators: Widget Panel for displaying internal information similar to TV's 'DataWindow'
	- Frame Selection: Allow for Frames to be targeted (Ctrl-Clicked in Frame Viewer) and prioritize these frames as
						when the layout changes. (Also Alt Clicking A frame to display only that frame)

	- Low Priority : Refactor the Tabs Manager to use @solid-dnd now that it is included
				in node_modules. Remove Dragabillies from node_modules


Frontend-Backend (Typescript):
	- Chart Mouse Event/Keyboard Listener to open menus / delete objects
		- Window Wide Keyboard Listener?

	- Indicators: Make Indicator Menus auto-generate a Style Menu in the event set_menu_struct is never called 

	- Update the Pane 'make_event_params' to have better Series Hit Registration

	- Data-Viewer Widget Panel: Panel that displays information (and maybe allows options control) of a selected
		object. Could potentially show Data on Series, primitive, & indicator objects

	- Frame-Viewer(?) Update: Allow for toggling of Pane Axis Visiblity

	-- Series:
		- Allow for controls to move series objects between left/right/overlay/named price axises

	-- Primitives:
		- Additional Primitive Tools

		- Reasses how a TrendLine ensures it is visible in update(). This could require a
				primitive-renderer base-class that takes raw data points and ensures the points are
				drawn at always drawn at visible locations. (could incorperate a cache system for this)

		- Options + Style Menu System

		- Make an ID Scheme for primitive group serieses

	-- Multi-Pane Layouts:
		- Charting Frame + Pane: Integrate a Method for changing a Charting Frame's internal layout so
								Multiple Panes can be displayed per Frame. (Multi-layout already supported.) 
		
		- Frame Viewer widget panel: Update to allow panes to be rearranged, & added

		- Primitives: Re-assess Method for generating IDs when adding Primitives to a Pane. Should this ping python
						for a name? Should it generate a random string of chars? if so, What would be the scope and
						length of the generated ID? What are the ramifications on ID collision when drawings
						are (potentially) moved/shared across frames? Do you even try and create a global scope
						or do user drawn/loaded primitives have an ID scope of just the pane they are attached to
						necessitating this ID (actually whole object) is recreated on pane movement.
						Should the Python Pane Object even try and keep track of it's own list of primitive IDs
						or is this just left to python?

		- Primitives, Series, Indicators: Implement Move-To-Pane Methods


Backend-Backend (Python):
	- Indicator Exception Handler: In the Watcher, when a call to set_data or update_data is made, a try-except block
					could be inserted to guard against the program crashing. This could involve the creation of an on
					screen interface to display the error when such an error occurs.

	- Primitves : Re-assess the parent of a primitive and from which pool their IDs are generated against. 
					Should Ideally allow for primitives to be created under one constant ID in python, but still allow
					traversal of panes..... or maybe they break the constant ID rule and when they shift panes a new id is
					generated and the python primitive object ID is updated?

	- Emitter : Allow the class to track async tasks it has launched and ensure async tasks launch properly before shutdown. 
				Currently, There is a small bug on shutdown where things like the Python Series Indicator throw an error
				as they try to trigger the socket_switch_close() async request, but this comes after the main asyncio.run()
				have already completed so the event loop is no longer valid.. or something like that.... 

	- Series_DF : Implement a 'Time is EXT Trade Hours' check.
				: Incorperate Calendar information into 'next_bar_time()'
				: Optimize this class... by optimizing Pandas_Market_Calendars :( PMC is by far the slowest piece of code
					involved in this entire library. Optimizing it will be the biggest bang-for-buck performance optimization

	- Disable GIL : Experiment with Disabling the GIL in Python 3.13. This implmentation would replace the multi-processing
					behavior with multi-threading. This *could* be a decent performance increase seeing as how the memory space
					between Core A and Core B would be shared. Modules wouldn't need to load twice on start-up and,
					more importantly, all objects that traverse the Queue wouldn't need to be pickled. They could just reference
					the memory location of the relevant object which would be far more efficient. In additon, without pickling, 
					bound functions could be passed through the queue potentially allowing for more direct communication between
					indicators / series / primitive / etc. objects and the window.

Cross-Architecture:
	- Indicators: Search Menu + Python Import-Lib

	- Replay : Incorperate a Replay like mode. This really would be a tool to test other systems/Indicators
			   as they are developed.

	- Series Objects / Series_DFs : Create an 'infinite-history' system as described by :
			https://tradingview.github.io/lightweight-charts/tutorials/demos/infinite-history
			This would help lighten the load on the fwd_queue preventing future bottlenecks

	- Trade-Execution: Add support for trade buy/sell execution events to the window event manager. 
						Indicators already have access to the Event system for this reason.
						Potentially incorperate this into a strategy tester located into the util bar

	- Watchlists: Create a Watchlist Side-bar Widget. Could require open sockets for price updates.

	- Timezones: Add timezone control support (likely to the bottom util control bar)

	- Frames : More like, todo as desired.. 
			  - Expand the number of Frame Subclasses to include things like
	 			stock screeners, Broker Integration, & Depth of Book info.

			  - Create a 'Mutable' Frame Type that replaces the Default Frame Type of 'Chart'. UI would
			  	allow the user to select the generated frame type.

			  - Add Frame Creation Buttons to the Frame Viewer so Various Frame Types can be created without
			  	requireing the layout to first be expanded. (Only current method of adding frames)
